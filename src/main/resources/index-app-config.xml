<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
	xmlns="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		">


	<!-- Define the global parameters used when deploying without maven -->
    <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:appConfig.properties</value>
                <value>file:${user.home}/configfiles/datasourcesConfig.properties</value>
                <value>file:${user.home}/configfiles/appConfig.properties</value>

            </list>
        </property>
    </bean>

	<!--<context:component-scan base-package="uk.ac.ebi" />-->

	<context:annotation-config />

	<!-- Drives transactions using Hibernate APIs when requested -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- Translates Hibernate exceptions to Spring Data Access Exceptions -->
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />



	<!-- Get the datasources from the filesystem overrides -->
    <!-- Creates a MySQL Datasource -->
    <bean id="komp2DataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="${komp2url}" />
        <property name="username" value="${komp2username}" />
        <property name="password" value="${komp2password}" />
    </bean>
    <bean id="ontodbDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="${ontodburl}" />
        <property name="username" value="${ontodbusername}" />
        <property name="password" value="${ontodbpassword}" />
    </bean>
    
	<!-- phenodigm external solr server via HTTP -->
	<bean id="solrServer" class="org.apache.solr.client.solrj.impl.HttpSolrServer">
		<constructor-arg index="0" value="${phenodigm.solrserver}" />
        <property name="soTimeout" value="5000" />
	</bean>

    <!--  Beans for writing to the solr servers -->
    <bean id="alleleIndexing" class="org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer">
        <constructor-arg index="0" value="${buildIndexesSolrUrl}/allele"/>
        <constructor-arg index="1" value="10000"/> <!--Queue size-->
        <constructor-arg index="2" value="3"/> <!--Num threads-->
    </bean>

    <bean id="preqcIndexing" class="org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer">
        <constructor-arg index="0" value="${buildIndexesSolrUrl}/preqc"/>
        <constructor-arg index="1" value="10000"/> <!--Queue size-->
        <constructor-arg index="2" value="3"/> <!--Num threads-->
    </bean>

    <!-- used for concurrently loading the experiment core -->
    <bean id="observationIndexing" class="org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer">
        <constructor-arg index="0" value="${buildIndexesSolrUrl}/experiment"/>
        <constructor-arg index="1" value="100000"/> <!--Queue size-->
        <constructor-arg index="2" value="5"/> <!--Num threads-->
    </bean>
    
     <bean id="sangerImagesIndexing" class="org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer">
        <constructor-arg index="0" value="${buildIndexesSolrUrl}/images"/>
        <constructor-arg index="1" value="100000"/> <!--Queue size-->
        <constructor-arg index="2" value="5"/> <!--Num threads-->
    </bean>

    <!-- used for concurrently loading the impc_images core -->
    <bean id="impcImagesIndexing" class="org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer">
        <constructor-arg index="0" value="${buildIndexesSolrUrl}/impc_images"/>
        <constructor-arg index="1" value="100000"/> <!--Queue size-->
        <constructor-arg index="2" value="5"/> <!--Num threads-->
    </bean>

    <bean id="mapService" class="uk.ac.ebi.phenotype.service.ParameterMapService">
        <constructor-arg value="${buildIndexesSolrUrl}/experiment" />
    </bean>


    <!-- Weaves in transactional advice around annotated Transactional methods -->
	<tx:annotation-driven transaction-manager="transactionManager" />


    <bean id="observationService" class="uk.ac.ebi.phenotype.service.ObservationService">
        <constructor-arg value="${buildIndexesSolrUrl}/experiment" />
    </bean>


    <!-- Dependencies for observationService -->
    <bean id="phenotypePipelineDAO" class="uk.ac.ebi.phenotype.dao.PhenotypePipelineDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="parameterToGeneMap" class="uk.ac.ebi.phenotype.util.ParameterToGeneMap" />




    <!-- Spring annotated objects -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="komp2DataSource" />
		<property name="packagesToScan" value="uk.ac.ebi.phenotype" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.connection.useUnicode">true</prop>
				<prop key="hibernate.connection.charSet">UTF8</prop>
			</props>
		</property>
	</bean>



	<bean id="globalConfiguration" class="org.springframework.beans.factory.config.MapFactoryBean">
		<property name="targetMapClass">
			<value>java.util.HashMap</value>
		</property>
		<property name="sourceMap">
			<map key-type="java.lang.String" value-type="java.lang.String">
				<entry key="version" value="${pom.version}" />
				<entry key="baseUrl" value="${baseUrl}" />
				<entry key="drupalBaseUrl" value="${drupalBaseUrl}" />
				<entry key="solrUrl" value="${solrUrl}" />
				<entry key="internalSolrUrl" value="${internalSolrUrl}" />
				<entry key="mediaBaseUrl" value="${mediaBaseUrl}" />
				<entry key="impcMediaBaseUrl" value="${impcMediaBaseUrl}" />
				<entry key="googleAnalytics" value="${googleAnalytics}" />
				<entry key="liveSite" value="${liveSite}" />
				<entry key="preqcXmlFilename" value="${preqcXmlfile}" />
                <entry key="human2mouseFilename" value="${human2mouseFile}" />
                <entry key="phenodigm.solrserver" value="${phenodigm.solrserver}" />
                <entry key="imits.solrserver" value="${imits.solrserver}" />
			</map>
		</property>
	</bean>


</beans>



