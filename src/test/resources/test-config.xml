<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/jdbc
		http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
                http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

    <bean id="executorService" class="java.util.concurrent.Executors"
          factory-method="newFixedThreadPool">
        <constructor-arg value="20" />
    </bean>

    <task:annotation-driven mode="proxy" executor="executorService" />
    <task:executor id="threadPoolTaskExecutor" />

    <context:component-scan base-package="uk.ac.ebi" />

    <!-- Define the global parameters used when deploying without maven -->
    <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:testConfig.properties</value>
                <value>file:${user.home}/configfiles/datasourcesConfig.properties</value>

            </list>
        </property>
    </bean>
    
    <bean id="observationSolrServer" class="org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer">
        <constructor-arg index="0" value="${internalSolrUrl}/experiment"/>
        <constructor-arg index="1" value="100000"/> <!--Queue size-->
        <constructor-arg index="2" value="5"/> <!--Num threads-->
    </bean>
    
    <!-- phenodigm external solr server via HTTP -->
    <bean id="solrServer" class="org.apache.solr.client.solrj.impl.HttpSolrServer">
        <constructor-arg index="0" value="${phenodigmSolrUrl}" />
    </bean>

    <!--this is the phenodigm DAO implementation we are looking for... -->
    <bean id="phenoDigmWebDao" class="uk.ac.sanger.phenodigm2.dao.PhenoDigmWebDaoSolrImpl" />

    <bean id="observationService" class="uk.ac.ebi.phenotype.service.ObservationService">
        <constructor-arg  value="${solrUrl}/experiment" />
    </bean>
	
    <bean id="phenotypeCenterService" class="uk.ac.ebi.phenotype.service.PhenotypeCenterService">
        <constructor-arg value="${internalSolrUrl}/experiment" />
    </bean>

    <bean id="preQcPhenotypeCenterService" class="uk.ac.ebi.phenotype.service.PhenotypeCenterService">
        <constructor-arg value="${internalSolrUrl}/preqc" />
    </bean>
	
    <bean id="impressService" class="uk.ac.ebi.phenotype.service.ImpressService">
        <constructor-arg value="${internalSolrUrl}/pipeline" />
    </bean>
 
    <bean id="releaseDAO" class="uk.ac.ebi.phenotype.dao.AnalyticsDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="experimentService" class="uk.ac.ebi.phenotype.service.ExperimentService">
    </bean>
    
    <bean id="imageService" class="uk.ac.ebi.phenotype.service.ImageService">
        <constructor-arg value="${internalSolrUrl}/impc_images" />
    </bean>
	
    <bean id="alleleService" class="uk.ac.ebi.phenotype.service.AlleleService">
        <constructor-arg value="${internalSolrUrl}/allele" />
    </bean>

    <bean id="unidimensionalStatisticsDAO" class="uk.ac.ebi.phenotype.dao.UnidimensionalStatisticsDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="statisticalResultDAO" class="uk.ac.ebi.phenotype.dao.StatisticalResultDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>
	
    <bean id="geneService" class="uk.ac.ebi.phenotype.service.GeneService">
        <constructor-arg  value="${solrUrl}/gene" />
    </bean>	
    <bean id="preqcService" class="uk.ac.ebi.phenotype.service.PreQcService">
        <constructor-arg value="${internalSolrUrl}/preqc" />
        <constructor-arg ref="phenotypePipelineDAO" />
    </bean>
	
    <bean id="postqcService" class="uk.ac.ebi.phenotype.service.PostQcService">
        <constructor-arg value="${internalSolrUrl}/genotype-phenotype" />
        <constructor-arg ref="phenotypePipelineDAO" />
    </bean>
    
    <bean id="statisticalResultService" class="uk.ac.ebi.phenotype.service.StatisticalResultService">
        <constructor-arg  value="${solrUrl}/statistical-result" />
	<constructor-arg ref="phenotypePipelineDAO" />
    </bean>
    
    <bean id="mpService" class="uk.ac.ebi.phenotype.service.MpService">
        <constructor-arg  value="${solrUrl}/mp" />
    </bean>

    <bean id="diseaseService" class="uk.ac.ebi.phenotype.service.DiseaseService">
        <constructor-arg value="${internalSolrUrl}/disease" />
    </bean>
    
    <bean id="sexualDimorphismDAO" class="uk.ac.ebi.phenotype.dao.SexualDimorphismDAOImpl" >
        <constructor-arg ref="sessionFactory" />
    </bean>
                
    <context:component-scan base-package="uk.ac.ebi" />
    <context:component-scan base-package="org.mousephenotype.www" />

    <context:annotation-config/>

    <!-- Weaves in transactional advice around @Transactional methods -->
    <tx:annotation-driven transaction-manager="transactionManager" />
	
    <bean id="biologicalModelDAO" class="uk.ac.ebi.phenotype.dao.BiologicalModelDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>
    
    <!--  <bean id="secondaryProjectDAO" class="uk.ac.ebi.phenotype.dao.SecondaryProjectDAOImpl">
                   <constructor-arg ref="sessionFactory" />
       </bean>
    -->
 
    <bean id="idg" class="uk.ac.ebi.phenotype.dao.SecondaryProjectIdgImpl">
        <constructor-arg ref="sessionFactory" />
        <!-- <constructor-arg ref="geneService" />
        <constructor-arg ref="genomicFeatureDAO" />
        <constructor-arg ref="genotypePhenotypeService"/>
        <constructor-arg ref="phenotypePipelineDAO"/> -->
		
    </bean>

    <bean id="threeI" class="uk.ac.ebi.phenotype.dao.SecondaryProject3iImpl">
    </bean>
    <bean id="observationDAO" class="uk.ac.ebi.phenotype.dao.ObservationDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="phenotypeCallSummaryDAO" class="uk.ac.ebi.phenotype.dao.PhenotypeCallSummaryDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="phenotypeCallSummaryDAOSolr" class="uk.ac.ebi.phenotype.pojo.PhenotypeCallSummarySolrImpl">
    </bean>
	
    <bean id="phenotypePipelineDAO" class="uk.ac.ebi.phenotype.dao.PhenotypePipelineDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="alleleDAO" class="uk.ac.ebi.phenotype.dao.AlleleDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="genomicFeatureDAO" class="uk.ac.ebi.phenotype.dao.GenomicFeatureDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="ontologyTermDAO" class="uk.ac.ebi.phenotype.dao.OntologyTermDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="sequenceRegionDAO" class="uk.ac.ebi.phenotype.dao.SequenceRegionDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="coordinateSystemDAO" class="uk.ac.ebi.phenotype.dao.CoordinateSystemDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="strainDAO" class="uk.ac.ebi.phenotype.dao.StrainDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="datasourceDAO" class="uk.ac.ebi.phenotype.dao.DatasourceDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="projectDAO" class="uk.ac.ebi.phenotype.dao.ProjectDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>

    <bean id="organisationDAO" class="uk.ac.ebi.phenotype.dao.OrganisationDAOImpl">
        <constructor-arg ref="sessionFactory" />
    </bean>	
	
    <bean id="imagingSourceManager" class="uk.ac.ebi.phenotype.imaging.springrest.images.dao.HibernateImagesDao">
        <constructor-arg ref="sessionFactory" />
        <constructor-arg ref="imagesSolrDao" />
    </bean>

    <bean id="imagesSolrDao" class="uk.ac.ebi.phenotype.imaging.springrest.images.dao.ImagesSolrJ">
        <constructor-arg name="solrBaseUrl" value="${solrUrl}/images" />
    </bean>
	
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="komp2DataSource"/>
        <property name="packagesToScan" value="uk.ac.ebi.phenotype"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.connection.useUnicode">true</prop>
                <prop key="hibernate.connection.charSet">UTF8</prop>
            </props>
        </property>
    </bean>

    <!-- Drives transactions using Hibernate APIs when requested -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
		
    <!-- Translates Hibernate exceptions to Spring Data Access Exceptions -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <bean id="globalConfiguration" class="org.springframework.beans.factory.config.MapFactoryBean">
        <property name="targetMapClass">
            <value>java.util.HashMap</value>
        </property>
        <property name="sourceMap">
            <map key-type="java.lang.String" value-type="java.lang.String">
                <entry key="baseUrl" value="${baseUrl}" />
                <entry key="drupalBaseUrl" value="${drupalBaseUrl}" />
                <entry key="solrUrl" value="${solrUrl}" />
                <entry key="solrUrl" value="${solrUrl}" />
                <entry key="mediaBaseUrl" value="${mediaBaseUrl}" />
                <entry key="googleAnalytics" value="${googleAnalytics}" />
                <entry key="liveSite" value="${liveSite}" />
            </map>
        </property>
    </bean>
    
    <util:properties id="testIterationsHash" location="classpath:testIterations.properties" />
    
    <bean id="testUtils" class="org.mousephenotype.www.testing.model.TestUtils" />

    <bean id="seleniumUrl" class="java.lang.String">
        <constructor-arg value="${seleniumUrl}"/>
    </bean>
    <bean id="baseUrl" class="java.lang.String">
        <constructor-arg value="${baseUrl}"/>
    </bean>
    <bean id="solrUrl" class="java.lang.String">
        <constructor-arg value="${solrUrl}"/>
    </bean>

    <bean id="desiredCapabilities" class="org.openqa.selenium.remote.DesiredCapabilities" />
         
    <!-- Since the target methods for these xxxDesiredCapabilities (e.g. chrome(), safari(), etc)
         are static, we need to use the more complex MethodInvokingFactoryBean to invoke them.
    -->
    <bean id="chromeDesiredCapabilities" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass">
            <value>org.openqa.selenium.remote.DesiredCapabilities</value>
        </property>
        <property name="targetMethod">
            <value>chrome</value>
        </property>
    </bean>
    <bean id="safariDesiredCapabilities" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass">
            <value>org.openqa.selenium.remote.DesiredCapabilities</value>
        </property>
        <property name="targetMethod">
            <value>safari</value>
        </property>
    </bean>
    <bean id="iexploreDesiredCapabilities" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass">
            <value>org.openqa.selenium.remote.DesiredCapabilities</value>
        </property>
        <property name="targetMethod">
            <value>internetExplorer</value>
        </property>
    </bean>
    <bean id="firefoxDesiredCapabilities" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass">
            <value>org.openqa.selenium.remote.DesiredCapabilities</value>
        </property>
        <property name="targetMethod">
            <value>firefox</value>
        </property>
    </bean>

    <bean id="driver" class="org.openqa.selenium.remote.RemoteWebDriver" scope="prototype">
        <constructor-arg ref="seleniumUrl" />
        <constructor-arg ref="${desiredCapabilities}" />
    </bean>

    <!-- Creates a MySQL Datasource -->
    <bean id="komp2DataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="${komp2url}" />
        <property name="username" value="${komp2username}" />
        <property name="password" value="${komp2password}" />
    </bean>
    <bean id="ontodbDataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="${ontodburl}" />
        <property name="username" value="${ontodbusername}" />
        <property name="password" value="${ontodbpassword}" />
    </bean>

</beans>
