<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		">

	<bean id="executorService" class="java.util.concurrent.Executors"
		factory-method="newFixedThreadPool">
		<constructor-arg value="20" />
	</bean>

	<task:annotation-driven mode="proxy" executor="executorService" />
	<task:executor id="threadPoolTaskExecutor" />


	<!-- Define the global parameters used when deploying without maven -->
	<bean id="propertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:appConfig.properties</value>
			</list>
		</property>
	</bean>

	<context:component-scan base-package="uk.ac.ebi" />
	<context:component-scan base-package="uk.ac.sanger.phenodigm2.controller" />

	<context:annotation-config />

	<!-- Drives transactions using Hibernate APIs when requested -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- Translates Hibernate exceptions to Spring Data Access Exceptions -->
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- Get the datasources from the JNDI container -->
	<jee:jndi-lookup id="komp2DataSource"
		jndi-name="java:comp/env/jdbc/komp2DataSource" expected-type="javax.sql.DataSource" />

	<!-- phenodigm external solr server via HTTP -->
	<bean id="solrServer" class="org.apache.solr.client.solrj.impl.HttpSolrServer">
		<constructor-arg index="0" value="${phenodigmSolrUrl}" />
	</bean>

	<!--this is the phenodigm DAO implementation we are looking for... -->
	<bean id="phenoDigmWebDao" class="uk.ac.sanger.phenodigm2.dao.PhenoDigmWebDaoSolrImpl" />

	<!-- Weaves in transactional advice around @Transactional methods -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="observationService" class="uk.ac.ebi.phenotype.service.ObservationService">
		<constructor-arg value="${internalSolrUrl}/experiment" />
	</bean>
	
	<bean id="imageService" class="uk.ac.ebi.phenotype.service.ImageService">
		<constructor-arg value="${internalSolrUrl}/impc_images" />
	</bean>

	<bean id="mapService" class="uk.ac.ebi.phenotype.service.ParameterMapService">
		<constructor-arg value="${internalSolrUrl}/experiment" />
	</bean>
	
	<bean id="parameterToGeneMap" class="uk.ac.ebi.phenotype.util.ParameterToGeneMap"  />

	<bean id="unidimensionalStatisticsDAO" class="uk.ac.ebi.phenotype.dao.UnidimensionalStatisticsDAOImpl">
		<constructor-arg ref="sessionFactory" />
	</bean>

	<bean id="statisticalResultDAO" class="uk.ac.ebi.phenotype.dao.StatisticalResultDAOImpl">
		<constructor-arg ref="sessionFactory" />
	</bean>

	<bean id="releaseDAO" class="uk.ac.ebi.phenotype.dao.AnalyticsDAOImpl">
		<constructor-arg ref="sessionFactory" />
	</bean>

	<bean id="experimentService" class="uk.ac.ebi.phenotype.service.ExperimentService">
	</bean>

	<bean id="genotypePhenotypeService" class="uk.ac.ebi.phenotype.service.GenotypePhenotypeService">
		<constructor-arg value="${internalSolrUrl}/genotype-phenotype" />
	</bean>

	<bean id="statisticalResultService" class="uk.ac.ebi.phenotype.service.StatisticalResultService">
		<constructor-arg value="${internalSolrUrl}/statistical-result" />
	</bean>


	<bean id="geneService" class="uk.ac.ebi.phenotype.service.GeneService">
		<constructor-arg value="${internalSolrUrl}/gene" />
	</bean>

	<bean id="mpService" class="uk.ac.ebi.phenotype.service.MpService">
		<constructor-arg value="${internalSolrUrl}/mp" />
	</bean>

	<bean id="biologicalModelDAO" class="uk.ac.ebi.phenotype.dao.BiologicalModelDAOImpl">
		<constructor-arg ref="sessionFactory" />
	</bean>

	<!-- <bean id="secondaryProjectDAO" class="uk.ac.ebi.phenotype.dao.SecondaryProjectDAOImpl"> 
		<constructor-arg ref="sessionFactory" /> </bean> -->

	<bean id="phenotypeCallSummaryDAO" class="uk.ac.ebi.phenotype.dao.PhenotypeCallSummaryDAOImpl">
		<constructor-arg ref="sessionFactory" />
	</bean>

	<bean id="phenSummary" class="uk.ac.ebi.phenotype.ontology.PhenotypeSummaryDAOImpl">
	</bean>

	<bean id="phenotypeCallSummaryDAOSolr" class="uk.ac.ebi.phenotype.pojo.PhenotypeCallSummarySolrImpl">
	</bean>

	<bean id="phenotypePipelineDAO" class="uk.ac.ebi.phenotype.dao.PhenotypePipelineDAOImpl">
		<constructor-arg ref="sessionFactory" />
	</bean>

	<bean id="alleleDAO" class="uk.ac.ebi.phenotype.dao.AlleleDAOImpl">
		<constructor-arg ref="sessionFactory" />
	</bean>

	<bean id="genomicFeatureDAO" class="uk.ac.ebi.phenotype.dao.GenomicFeatureDAOImpl">
		<constructor-arg ref="sessionFactory" />
	</bean>

	<bean id="ontologyTermDAO" class="uk.ac.ebi.phenotype.dao.OntologyTermDAOImpl">
		<constructor-arg ref="sessionFactory" />
	</bean>

	<bean id="sequenceRegionDAO" class="uk.ac.ebi.phenotype.dao.SequenceRegionDAOImpl">
		<constructor-arg ref="sessionFactory" />
	</bean>

	<bean id="coordinateSystemDAO" class="uk.ac.ebi.phenotype.dao.CoordinateSystemDAOImpl">
		<constructor-arg ref="sessionFactory" />
	</bean>

	<bean id="strainDAO" class="uk.ac.ebi.phenotype.dao.StrainDAOImpl">
		<constructor-arg ref="sessionFactory" />
	</bean>

	<bean id="datasourceDAO" class="uk.ac.ebi.phenotype.dao.DatasourceDAOImpl">
		<constructor-arg ref="sessionFactory" />
	</bean>

	<bean id="projectDAO" class="uk.ac.ebi.phenotype.dao.ProjectDAOImpl">
		<constructor-arg ref="sessionFactory" />
	</bean>

	<bean id="organisationDAO" class="uk.ac.ebi.phenotype.dao.OrganisationDAOImpl">
		<constructor-arg ref="sessionFactory" />
	</bean>

	<bean id="idg" class="uk.ac.ebi.phenotype.dao.SecondaryProjectIdgImpl">
		<constructor-arg ref="sessionFactory" />
		<!-- <constructor-arg ref="geneService" /> <constructor-arg ref="genomicFeatureDAO" 
			/> <constructor-arg ref="genotypePhenotypeService"/> <constructor-arg ref="phenotypePipelineDAO"/> -->

	</bean>

	<!-- Spring annotated objects -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="komp2DataSource" />
		<property name="packagesToScan" value="uk.ac.ebi.phenotype" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.connection.useUnicode">true</prop>
				<prop key="hibernate.connection.charSet">UTF8</prop>
			</props>
		</property>
	</bean>

	<bean id="imagingSourceManager"
		class="uk.ac.ebi.phenotype.imaging.springrest.images.dao.HibernateImagesDao">
		<constructor-arg ref="sessionFactory" />
		<constructor-arg ref="imagesSolrDao" />
	</bean>

	<!-- If deploying without maven, the solrUrl variable is replaced by Spring's 
		PropertyPlaceholder configuration. If deploying with maven, the maven filter 
		replaces the solrUrl variable with the value specified in the pom.xml file. 
		If deploying using a profile (e.g. mvn tomcat:deploy -Pexternal_beta) the 
		solrUrl variable is replaced with the appropriate value from the profile 
		in the pom.xml file. -->
	<bean id="imagesSolrDao"
		class="uk.ac.ebi.phenotype.imaging.springrest.images.dao.ImagesSolrJ">
		<constructor-arg name="solrBaseUrl" value="${solrUrl}/images" />
	</bean>

	<bean id="globalConfiguration" class="org.springframework.beans.factory.config.MapFactoryBean">
		<property name="targetMapClass">
			<value>java.util.HashMap</value>
		</property>
		<property name="sourceMap">
			<map key-type="java.lang.String" value-type="java.lang.String">
				<entry key="version" value="${pom.version}" />
				<entry key="baseUrl" value="${baseUrl}" />
				<entry key="drupalBaseUrl" value="${drupalBaseUrl}" />
				<entry key="solrUrl" value="${solrUrl}" />
				<entry key="internalSolrUrl" value="${internalSolrUrl}" />
				<entry key="mediaBaseUrl" value="${mediaBaseUrl}" />
				<entry key="googleAnalytics" value="${googleAnalytics}" />
				<entry key="liveSite" value="${liveSite}" />
			</map>
		</property>
	</bean>


</beans>
